// Promise.all([
//   new Promise((resolve, reject) => setTimeout(() => resolve(1), 1000)),
//   new Promise((resolve, reject) =>
//     setTimeout(() => reject(2), 2000)
//   ),
//   new Promise((resolve, reject) => setTimeout(() => resolve(3), 3000)),
// ]);

//     .then(console.log)
//     .catch(console.log);




//  Вы разрабатываите приложения , которые отправляют запросы на разные сервера и хотите 
//  определить каккой сервер быстрее. Напишите функцию которое в качестве аргумента принемает
//   массив URL-адрес  в качестве аргумента возвращает Promis . Promis Долженр быть выполнен  с URL- Адресов сервера, который первый ответил на запрос


let checServerResponse = (urls) => {
    let promise = urls.map((url) => fetch(url));

    return Promise.race(promise)
    .then((response) => {
        return response.url;
    });
}


let urls = [
  "https://ru.tradingview.com/",
  "https://coinmarketcap.com/",
  "https://www.youtube.com/feed/history",
];



 checServerResponse(urls)
 .then((fastesServer) => {
   console.log("Самый быстрый сервер", fastesServer);
 })

 .catch((error)=> {
    console.log("Оибка",error);

 })





 const number = [3,5,6,7,9,];
  const dubleNumber = () => number.map((num) => num *2);

  console.log(dubleNumber(number));
   






//   Функция map в JavaScript используется для преобразования каждого элемента массива в новый элемент и создания нового массива на основе результатов преобразования. Она принимает в качестве аргументов функцию обратного вызова (callback) и необязательный контекст (this). 

// Основные цели использования функции map включают:
// 1. Преобразование элементов массива: Функция map позволяет применить определенную операцию или функцию к каждому элементу массива и создать новый массив с результатами. Например, можно использовать map для удвоения всех чисел в массиве или для преобразования строк в верхний регистр.
// 2. Создание нового массива: Функция map создает новый массив на основе результатов преобразования каждого элемента исходного массива. Таким образом, она позволяет получить новый массив с измененными значениями, не изменяя исходный массив.
// 3. Упрощение кода: Использование функции map позволяет упростить код, особенно при работе с большими массивами. Вместо использования цикла for или forEach можно использовать функцию map для выполнения операции над каждым элементом массива одной строкой кода.

// Пример использования функции map:

// ```javascript
// const numbers = [1, 2, 3, 4, 5];

// const doubledNumbers = numbers.map((num) => num * 2);
// // Результат: [2, 4, 6, 8, 10]
// ```

// В данном примере функция map применяет операцию умножения на 2 к каждому элементу массива numbers и создает новый 